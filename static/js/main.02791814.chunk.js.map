{"version":3,"sources":["components/style/style.js","components/actions/types.js","components/actions/actions.js","components/layout/ColorPanel.js","components/layout/Home.js","components/layout/Gallery.js","components/layout/Readme.js","components/layout/Header.js","components/layout/Footer.js","components/App.js","serviceWorker.js","components/reducers/reducers.js","store.js","index.js","components/style/theme.js"],"names":["styles","theme","@global body","background","palette","color","text","App","margin","title-primary","primary","transition","title-secondary","secondary","btn","border","cursor","&:focus","outline","canvasStyle","position","overflow","borderRadius","display","flexDirection","justifyContent","alignItems","inputBar","fontFamily","font","width","height","padding","label","headline","@media screen and (max-width: 800px)","TOGGLE_TITLE_COLOR","WRITE_MEME_CAPTION","SAVE_MEME","CHANGE_COLOR","saveMeme","payload","type","actionType","ColorPanel","changeColor","e","_this$props","_this","props","classes","changeColorText","memeText","target","className","vid","document","getElementById","ctx","getContext","colorWhite","fillStyle","colorPrimary","colorSecondary","colorBlack","tertiary","drawImage","fillText","this","react_default","a","createElement","colorContainer","onClick","Component","connect","state","memeState","injectSheet","& div","&:hover","Home","togglePlay","handlePlay","pause","setState","handleText","play","textAlign","handleDownload","image","toDataURL","link","download","href","click","handleSave","memeGallery","updGallery","concat","Object","toConsumableArray","localStorage","setItem","JSON","stringify","handleChange","writeMemeCaption","value","Fragment","ref","id","crossOrigin","playsInline","autoPlay","muted","loop","src","index_es","size","icon","onChange","placeholder","layout_ColorPanel","Gallery","galleryContainer","map","meme","key","uuid","alt","galleryImage","Readme","Header","toggleTitleColor","titleColor","zIndex","&  h1","fontSize","Footer","List","react_router_dom","to","bottom","backgroundSecond","listStyle","& li","& a","textDecoration","& a:hover","library","add","faPlay","faPause","faDownload","faSave","console","log","getItem","parse","layout_Header","react_router","path","component","layout_Footer","Boolean","window","location","hostname","match","defaultState","root","combineReducers","arguments","length","undefined","action","objectSpread","store","createStore","ReactDOM","render","es","lib","components_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.02791814.chunk.js","sourcesContent":["export const styles = theme => ({\r\n  \"@global body\": {\r\n    background: theme.palette.background,\r\n    color: theme.palette.text\r\n  },\r\n  App: {\r\n    margin: \"auto\"\r\n  },\r\n  \"title-primary\": {\r\n    color: theme.palette.primary,\r\n    transition: \"all 0.4s\"\r\n  },\r\n  \"title-secondary\": {\r\n    color: theme.palette.secondary,\r\n    transition: \"all 0.4s\"\r\n  },\r\n  btn: {\r\n    background: \"none\",\r\n    border: \"none\",\r\n    cursor: \"pointer\",\r\n    \"&:focus\": {\r\n      outline: \"none\"\r\n    }\r\n  },\r\n  canvasStyle: {\r\n    margin: \"0 auto\",\r\n    position: \"relative\",\r\n    overflow: \"hidden\",\r\n    border: \"0.5px solid\" + theme.palette.primary,\r\n    borderRadius: \"8px\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\"\r\n  },\r\n  inputBar: {\r\n    border: \"0\",\r\n    fontFamily: theme.palette.font,\r\n    width: \"100%\",\r\n    height: \"30px\",\r\n    padding: \"0 0 0 5px\",\r\n    borderRadius: \"5px\",\r\n    \"&:focus\": {\r\n      outline: \"none\",\r\n      background: theme.palette.secondary,\r\n      transition: \"all 0.5s\"\r\n    }\r\n  },\r\n  label: {\r\n    fontFamily: theme.palette.headline,\r\n    color: theme.palette.primary,\r\n    width: \"100%\"\r\n  },\r\n  \"@media screen and (max-width: 800px)\": {\r\n    App: {\r\n      margin: \"auto\",\r\n      width: \"95%\"\r\n    }\r\n  }\r\n});\r\n\r\nexport const headerStyle = theme => ({\r\n  Header: {\r\n    width: \"100%\",\r\n    zIndex: \"20\",\r\n    background: \"black\",\r\n    \"&  h1\": {\r\n      margin: \"0\",\r\n      padding: \"5px 0\",\r\n      fontSize: \"3rem\",\r\n      textAlign: \"center\",\r\n      fontFamily: theme.palette.headline,\r\n      cursor: \"pointer\"\r\n    }\r\n  },\r\n  \"title-primary\": {\r\n    color: theme.palette.primary,\r\n    transition: \"all 0.4s\"\r\n  },\r\n  \"title-secondary\": {\r\n    color: theme.palette.secondary,\r\n    transition: \"all 0.4s\"\r\n  }\r\n});\r\n\r\nexport const footerStyle = theme => ({\r\n  Footer: {\r\n    position: \"fixed\",\r\n    bottom: \"0\",\r\n    width: \"100%\",\r\n    height: \"50px\",\r\n    background: theme.palette.backgroundSecond\r\n  },\r\n  List: {\r\n    listStyle: \"none\",\r\n    display: \"flex\",\r\n    \"& li\": {\r\n      margin: \"0 10px 0 0\",\r\n      fontFamily: theme.palette.font,\r\n      \"& a\": {\r\n        fontFamily: theme.palette.headline,\r\n        color: theme.palette.secondary,\r\n        textDecoration: \"none\"\r\n      },\r\n      \"& a:hover\": {\r\n        color: theme.palette.text,\r\n        transition: \"all 0.4s\"\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\nexport const galleryStyle = theme => ({\r\n  galleryContainer: {\r\n    width: \"100%\",\r\n    height: \"auto\",\r\n    margin: \"0 0 70px\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\"\r\n  },\r\n  galleryImage: {\r\n    margin: \"25px 0\",\r\n    width: \"600px\",\r\n    height: \"350px\",\r\n    border: \"1px solid \" + theme.palette.secondary\r\n  }\r\n});\r\n\r\nexport const colorPanel = theme => ({\r\n  colorContainer: {\r\n    width: \"100%\",\r\n    height: \"auto\",\r\n    margin: \"20px 0\",\r\n    display: \"flex\",\r\n    \"& div\": {\r\n      width: \"40px\",\r\n      height: \"40px\",\r\n      border: \"2px solid black\",\r\n      margin: \"0 5px 0 0\",\r\n      cursor: \"pointer\",\r\n      \"&:hover\": {\r\n        border: \"2px solid white\",\r\n        transition: \"border 0.4s\"\r\n      }\r\n    }\r\n  },\r\n  colorWhite: {\r\n    background: theme.palette.text\r\n  },\r\n  colorPrimary: {\r\n    background: theme.palette.primary\r\n  },\r\n  colorSecondary: {\r\n    background: theme.palette.secondary\r\n  },\r\n  colorBlack: {\r\n    background: theme.palette.tertiary\r\n  }\r\n});\r\n","export const TOGGLE_TITLE_COLOR = \"TOGGLE_TITLE_COLOR\";\r\nexport const WRITE_MEME_CAPTION = \"WRITE_MEME_CAPTION\";\r\nexport const SAVE_MEME = \"SAVE_MEME\";\r\nexport const CHANGE_COLOR = \"CHANGE_COLOR\";\r\n","import * as actionType from \"./types.js\";\r\n\r\nexport const toggleTitleColor = () => ({\r\n  type: actionType.TOGGLE_TITLE_COLOR\r\n});\r\n\r\nexport const writeMemeCaption = payload => ({\r\n  type: actionType.WRITE_MEME_CAPTION,\r\n  payload: payload\r\n});\r\n\r\nexport const saveMeme = payload => ({\r\n  type: actionType.SAVE_MEME,\r\n  payload: payload\r\n});\r\n\r\nexport const changeColorText = payload => ({\r\n  type: actionType.CHANGE_COLOR,\r\n  payload: payload\r\n});\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n//style\r\nimport injectSheet from \"react-jss\";\r\nimport { colorPanel } from \"../style/style.js\";\r\n//redux\r\nimport { connect } from \"react-redux\";\r\nimport { changeColorText } from \"../actions/actions\";\r\n\r\nclass ColorPanel extends Component {\r\n  changeColor = e => {\r\n    const { classes, changeColorText, theme, memeText } = this.props;\r\n    const color = e.target.className;\r\n\r\n    const vid = document.getElementById(\"meme\");\r\n    const canvas = document.getElementById(\"videoCanvas\");\r\n    const ctx = canvas.getContext(\"2d\");\r\n\r\n    switch (color) {\r\n      case classes.colorWhite:\r\n        changeColorText(theme.palette.text);\r\n        ctx.fillStyle = theme.palette.text;\r\n        break;\r\n      case classes.colorPrimary:\r\n        changeColorText(theme.palette.primary);\r\n        ctx.fillStyle = theme.palette.primary;\r\n        break;\r\n      case classes.colorSecondary:\r\n        changeColorText(theme.palette.secondary);\r\n        ctx.fillStyle = theme.palette.secondary;\r\n        break;\r\n      case classes.colorBlack:\r\n        changeColorText(theme.palette.tertiary);\r\n        ctx.fillStyle = theme.palette.tertiary;\r\n        break;\r\n      default:\r\n        changeColorText(theme.palette.text);\r\n    }\r\n\r\n    ctx.drawImage(vid, 0, 0, 800, 450);\r\n    ctx.fillText(memeText, 400, 400, 600);\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    return (\r\n      <section className={classes.colorContainer}>\r\n        <div onClick={this.changeColor} className={classes.colorWhite} />\r\n        <div onClick={this.changeColor} className={classes.colorPrimary} />\r\n        <div onClick={this.changeColor} className={classes.colorSecondary} />\r\n        <div onClick={this.changeColor} className={classes.colorBlack} />\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nColorPanel.propTypes = {\r\n  memeText: PropTypes.string.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  memeText: state.memeState.memeText\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { changeColorText }\r\n)(injectSheet(colorPanel)(ColorPanel));\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n//style\r\nimport injectSheet from \"react-jss\";\r\nimport { styles } from \"../style/style.js\";\r\n//REDUX\r\nimport { connect } from \"react-redux\";\r\nimport { writeMemeCaption, saveMeme } from \"../actions/actions.js\";\r\n//font awesome\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n//components\r\nimport ColorPanel from \"./ColorPanel\";\r\n\r\nclass Home extends Component {\r\n  state = {\r\n    togglePlay: true\r\n  };\r\n\r\n  handlePlay = () => {\r\n    const { togglePlay } = this.state;\r\n    const { memeText } = this.props;\r\n    const vid = document.getElementById(\"meme\");\r\n\r\n    if (togglePlay) {\r\n      vid.pause();\r\n      this.setState({ togglePlay: false });\r\n      this.handleText(memeText);\r\n    } else {\r\n      vid.play();\r\n      this.setState({ togglePlay: true });\r\n      this.handleText(memeText);\r\n    }\r\n  };\r\n\r\n  handleText = text => {\r\n    const vid = document.getElementById(\"meme\");\r\n    const canvas = document.getElementById(\"videoCanvas\");\r\n    const ctx = canvas.getContext(\"2d\");\r\n    let color = this.props.changeColor;\r\n\r\n    ctx.font = \"40px Courier\";\r\n    ctx.fillStyle = color;\r\n    ctx.textAlign = \"center\";\r\n\r\n    ctx.drawImage(vid, 0, 0, 800, 450);\r\n    ctx.fillText(text, 400, 400, 600);\r\n  };\r\n\r\n  handleDownload = () => {\r\n    const canvas = document.getElementById(\"videoCanvas\");\r\n    let image = canvas.toDataURL(\"image/jpeg\", 1.0);\r\n\r\n    const link = document.createElement(\"a\");\r\n    link.download = \"meme.jpeg\";\r\n    link.href = image;\r\n    link.click();\r\n  };\r\n\r\n  handleSave = () => {\r\n    const { memeGallery } = this.props;\r\n    const canvas = document.getElementById(\"videoCanvas\");\r\n    let image = canvas.toDataURL(\"image/jpeg\", 1.0);\r\n    let updGallery = [...memeGallery, image];\r\n\r\n    localStorage.setItem(\"memeGallery\", JSON.stringify(updGallery));\r\n    this.props.saveMeme(image);\r\n  };\r\n\r\n  handleChange = e => {\r\n    this.props.writeMemeCaption(e.target.value);\r\n    this.handleText(e.target.value);\r\n  };\r\n\r\n  render() {\r\n    const { togglePlay } = this.state;\r\n    const { classes } = this.props;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <section className={classes.canvasStyle}>\r\n          <canvas\r\n            className={togglePlay ? \"hidden\" : \"visible\"}\r\n            ref=\"canvas\"\r\n            id=\"videoCanvas\"\r\n            width=\"800\"\r\n            height=\"450\"\r\n          />\r\n          <video\r\n            crossOrigin=\"anonymous\"\r\n            id=\"meme\"\r\n            width=\"800\"\r\n            height=\"450\"\r\n            playsInline\r\n            autoPlay\r\n            muted\r\n            loop\r\n          >\r\n            <source\r\n              src=\"https://upload.wikimedia.org/wikipedia/en/transcoded/6/61/Old_Man_Drinking_a_Glass_of_Beer_%281897%29.webm/Old_Man_Drinking_a_Glass_of_Beer_%281897%29.webm.360p.webm\"\r\n              type=\"video/webm\"\r\n            />\r\n          </video>\r\n        </section>\r\n        <section className=\"button-panel\">\r\n          <button onClick={this.handlePlay} className={classes.btn}>\r\n            {togglePlay ? (\r\n              <FontAwesomeIcon\r\n                className={classes[`title-primary`] + \" icon\"}\r\n                size=\"3x\"\r\n                icon=\"pause\"\r\n              />\r\n            ) : (\r\n              <FontAwesomeIcon\r\n                className={classes[`title-secondary`] + \" icon\"}\r\n                size=\"3x\"\r\n                icon=\"play\"\r\n              />\r\n            )}\r\n          </button>\r\n          <button onClick={this.handleDownload} className={classes.btn}>\r\n            <FontAwesomeIcon\r\n              className={classes[`title-primary`] + \" icon\"}\r\n              size=\"3x\"\r\n              icon=\"download\"\r\n            />\r\n          </button>\r\n          <button onClick={this.handleSave} className={classes.btn}>\r\n            <FontAwesomeIcon\r\n              className={classes[`title-primary`] + \" icon\"}\r\n              size=\"3x\"\r\n              icon=\"save\"\r\n            />\r\n          </button>\r\n        </section>\r\n        <section className=\"input-section\">\r\n          <label className={classes.label}>Meme text:</label>\r\n          <input\r\n            className={classes.inputBar}\r\n            onChange={this.handleChange}\r\n            type=\"text\"\r\n            placeholder=\"Something edgy...\"\r\n          />\r\n        </section>\r\n        <ColorPanel />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nHome.propTypes = {\r\n  memeText: PropTypes.string.isRequired,\r\n  memeGallery: PropTypes.array.isRequired,\r\n  changeColor: PropTypes.string.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  memeText: state.memeState.memeText,\r\n  memeGallery: state.memeState.memeGallery,\r\n  changeColor: state.memeState.changeColor\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { writeMemeCaption, saveMeme }\r\n)(injectSheet(styles)(Home));\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport injectSheet from \"react-jss\";\r\nimport { galleryStyle } from \"../style/style.js\";\r\nimport { connect } from \"react-redux\";\r\nimport uuid from \"uuid\";\r\n\r\nclass Gallery extends Component {\r\n  render() {\r\n    const { classes, memeGallery } = this.props;\r\n\r\n    return (\r\n      <div className={classes.galleryContainer}>\r\n        {memeGallery.map(meme => (\r\n          <img\r\n            key={uuid()}\r\n            src={meme}\r\n            alt=\"meme\"\r\n            className={classes.galleryImage}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nGallery.propTypes = {\r\n  memeGallery: PropTypes.array.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  memeGallery: state.memeState.memeGallery\r\n});\r\n\r\nexport default connect(mapStateToProps)(injectSheet(galleryStyle)(Gallery));\r\n","import React, { Component } from \"react\";\r\n\r\nclass Readme extends Component {\r\n  render() {\r\n    return (\r\n      <section>\r\n        <h2>Devtest Readme</h2>\r\n        <p>\r\n          Hello candidate, Welcome to our little dev test. The goal of this\r\n          exercise, is to asses your general skill level, and give us something\r\n          to talk about at our next appointment.\r\n        </p>\r\n        <section>\r\n          <h3>What this app should do</h3>\r\n          <p>\r\n            We'd like for you to build a tiny app called the \"Vintage Meme\r\n            Machine\". It will be a tool that allows users to overlay text on a\r\n            video, and capture or share it.\r\n          </p>\r\n          <p>These are the basic requirements:</p>\r\n          <ul>\r\n            <li>User can pick a point in the video</li>\r\n            <li>\r\n              User can enter text that is placed over the video <em>still</em>\r\n            </li>\r\n            <li>User can save this personalized content for later use</li>\r\n          </ul>\r\n        </section>\r\n        <section>\r\n          <h3>What we want you to do</h3>\r\n          <p>\r\n            Off course we don't expect you to build a full fledged app in such a\r\n            short time frame.\r\n          </p>\r\n          <p>\r\n            But we would like for you to get in the basic requirements, in one\r\n            form or another. Beyond that feel free to show off your strenghts as\r\n            a frontend developer.\r\n          </p>\r\n          <p>Some ideas:</p>\r\n          <ul>\r\n            <li>Make it look really nice</li>\r\n            <li>Allow users to provide a custom video</li>\r\n            <li>Download the meme as an image file</li>\r\n            <li>Add fancy text effects to the text overlay</li>\r\n            <li>Push the resulting meme to a social media API</li>\r\n          </ul>\r\n        </section>\r\n        <section>\r\n          <p>\r\n            P.s. We've already added some libraries to make your life easier\r\n            (Redux, Jss, React Router), but feel free to add more.\r\n          </p>\r\n        </section>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Readme;\r\n","import React, { Component } from \"react\";\r\nimport injectSheet from \"react-jss\";\r\nimport { headerStyle } from \"../style/style.js\";\r\nimport { toggleTitleColor } from \"../actions/actions.js\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    const { classes, toggleTitleColor, titleColor } = this.props;\r\n\r\n    return (\r\n      <header className={classes.Header}>\r\n        <h1\r\n          onClick={toggleTitleColor}\r\n          className={classes[`title-${titleColor}`]}\r\n        >\r\n          Vintage Meme Machine\r\n        </h1>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  titleColor: state.memeState.titleColor\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { toggleTitleColor }\r\n)(injectSheet(headerStyle)(Header));\r\n","import React, { Component } from \"react\";\r\nimport injectSheet from \"react-jss\";\r\nimport { footerStyle } from \"../style/style.js\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Footer extends Component {\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    return (\r\n      <footer className={classes.Footer}>\r\n        <nav>\r\n          <ul className={classes.List}>\r\n            <li>\r\n              <Link to=\"/home\">Home</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/gallery\">Gallery</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/readme\">Readme</Link>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n      </footer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default injectSheet(footerStyle)(Footer);\r\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport injectSheet from \"react-jss\";\nimport { styles } from \"./style/style.js\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\n//import { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { saveMeme } from \"./actions/actions.js\";\n\n//components\nimport Home from \"./layout/Home\";\nimport Gallery from \"./layout/Gallery\";\nimport Readme from \"./layout/Readme\";\nimport Header from \"./layout/Header\";\nimport Footer from \"./layout/Footer\";\n\n//font awesome\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport {\n  faPlay,\n  faPause,\n  faDownload,\n  faSave\n} from \"@fortawesome/free-solid-svg-icons\";\nlibrary.add(faPlay, faPause, faDownload, faSave);\n\nclass App extends Component {\n  componentDidMount() {\n    const { memeGallery, saveMeme } = this.props;\n\n    if (memeGallery > !-1) {\n      console.log(\"data fetched through server\");\n    } else if (localStorage.getItem(\"memeGallery\") !== null) {\n      let value = localStorage.getItem(\"memeGallery\");\n      value = JSON.parse(value);\n      value.map(meme => saveMeme(meme));\n    }\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <div className=\"main-container\">\n        <Header />\n        <section className={classes.App}>\n          <Switch>\n            <Route path=\"/home\" component={Home} />\n            <Route path=\"/gallery\" component={Gallery} />\n            <Route path=\"/readme\" component={Readme} />\n            <Redirect to=\"/home\" />\n          </Switch>\n        </section>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  memeGallery: PropTypes.array.isRequired\n};\n\nconst mapStateToProps = state => ({\n  memeGallery: state.memeState.memeGallery\n});\n\nexport default connect(\n  mapStateToProps,\n  { saveMeme }\n)(injectSheet(styles)(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionType from \"../actions/types.js\";\r\n\r\nconst defaultState = {\r\n  titleColor: \"primary\",\r\n  memeText: \"\",\r\n  memeGallery: [],\r\n  changeColor: \"white\"\r\n};\r\n\r\nexport function memeState(state = defaultState, action) {\r\n  switch (action.type) {\r\n    case actionType.TOGGLE_TITLE_COLOR:\r\n      return {\r\n        ...state,\r\n        titleColor: state.titleColor === \"primary\" ? \"secondary\" : \"primary\"\r\n      };\r\n    case actionType.WRITE_MEME_CAPTION:\r\n      return { ...state, memeText: action.payload };\r\n    case actionType.SAVE_MEME:\r\n      return {\r\n        ...state,\r\n        memeGallery: [...state.memeGallery, action.payload]\r\n      };\r\n    case actionType.CHANGE_COLOR:\r\n      return { ...state, changeColor: action.payload };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { createStore, combineReducers } from \"redux\";\nimport { memeState } from \"./components/reducers/reducers.js\";\n\nconst root = combineReducers({ memeState });\nexport const store = createStore(root);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { ThemeProvider } from \"react-jss\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { store } from \"./store\";\nimport { theme } from \"./components/style/theme\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const theme = {\n  palette: {\n    primary: \"#F1DF99\",\n    secondary: \"#96CAA8\",\n    tertiary: \"#000000\",\n    background: \"#333\",\n    text: \"#fff\",\n    backgroundSecond: \"#000\",\n    font: \"serif\",\n    headline: \"righteous\"\n  }\n};\n"],"sourceRoot":""}